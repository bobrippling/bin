#!/bin/sh

set -e

usage(){
	cat >&2 <<!
Usage: $0 [ + | - | volume-to-set | <command> ]

Commands:
	t[oggle]
	l[ist]

Pulse-Commands:
	o[utputs]
	s[elect-output] [--watch] {output}

Environment:
	VOL_PA=0: Force off pulseaudio
	VOL_DEBUG=1: Emit debugging info
!
	exit 2
}

mixer(){
	if test -n "$VOL_CARD"
	then amixer -c "$VOL_CARD" "$@"
	else amixer                "$@"
	fi
}

get_active_dev(){
	# return the first '[on]' device

	if test $pulse -eq 1
	then
		pactl info | sed -n 's/Default Sink: \(.*\)/\1/p'
		return
	fi

	while read d
	do
		# ignore master control
		if test "$d" = Master
		then continue
		fi

		contents=$(mixer get "$d")
		if echo "$contents" | grep 'Playback channels' >/dev/null \
			&& echo "$contents" | grep '\[on\]$' >/dev/null
		then
			echo "$d"
			return
		fi
	done <<!
$devices
!

	# none found, try Master
	d=Master
	if mixer get "$d" >/dev/null
	then
		echo "$d"
		return
	fi

	echo >&2 "$0: can't find active device"
	exit 1
}

list(){
	if test $pulse -eq 1
	then
		pactl list sinks \
			| sed -n '
				: a;
				/^Sink #\(\d*\)/ {
					s/.*#\(.*\)/\1/;
					p;
				}
				/^[ \t]*\(Name\|Description\|Mute\):/ {
					/Description:/ {
						s/[^:]*: //;
						h;
						n;
						b a;
					}

					/Mute/ {
						s/[^:]*: //;
						p;
						g;
					}

					s/[^:]*: //;
					p;
				}
			' \
			| while read index && read name && read mute && read desc
				do
					if ! echo "$devices" | grep -F "$name" >/dev/null
					then continue
					fi

					if test "$1" = --enumerate
					then
						printf '%d ' $index
					fi

					if test "$mute" = no
					then echo "* $desc"
					else echo "- $desc"
					fi
				done
		return
	fi

	i=0
	echo "$devices" | while read d
	do
		contents=$(mixer get "$d")

		# playback only:
		if ! echo "$contents" | grep 'Playback channels:' >/dev/null
		then continue
		fi
		if ! echo "$contents" | grep pvolume >/dev/null
		then continue
		fi

		if test "$1" = --enumerate
		then
			printf '%d ' $i
			i=$(expr $i + 1)
		fi

		if echo "$contents" | grep '\[on\]$' >/dev/null
		then desc='*'
		else desc='-'
		fi

		echo "$desc $d"
	done
}

vol_get_1(){
	if test $pulse -eq 1
	then
		pactl list sinks \
			| grep -E '^\s*(Name|Volume):' \
			| while read line
				do
					name=$(echo $line | sed 's/Name: \(.*\)/\1/')
					if test "$name" = "$1"
					then
						show_next=1
						continue
					fi

					if test "$show_next" = 1
					then
						echo "$line" | grep -o '[0-9]\+%' | head -1
						break
					fi
				done
		return
	fi

	mixer get $1 | tail -1 | sed 's/.*\[\([0-9]*\)%\].*/\1/'
}

vol_set_1(){
	vol=$1
	dev=$2

	if test $pulse -eq 1
	then pactl set-sink-volume "$dev" "$vol%"
	else mixer set $dev "$vol%" >/dev/null
	fi
}

vol_dec_1(){
	if test $pulse -eq 1
	then pactl set-sink-volume "$1" "-1%"
	else mixer set $1 "1%-" >/dev/null
	fi
}

vol_inc_1(){
	if test $pulse -eq 1
	then pactl set-sink-volume "$1" "+1%"
	else mixer set $1 "1%+" >/dev/null
	fi
}

vol_get(){
	for_devices vol_get_1
}

vol_set(){
	for_devices vol_set_1 "$1"
}

vol_dec(){
	for_devices vol_dec_1
}

vol_inc(){
	for_devices vol_inc_1
}

swap_mute(){
	echo "$devices" | while read d
	do
		if test $pulse -eq 1
		then
			pactl set-sink-mute "$d" toggle
		else
			mixer set $d toggle >/dev/null
		fi
	done
}

interactive(){
	stty -echo -icanon
	while :
	do
		printf '%s %s\33[K\r' "$(vol_get_1 "$dev_default")" "$(list | grep '^\*' | cut -b3- | tr '\n' ', ')"
		ch="$(head -c1)"
		case "$ch" in
			k) vol_inc ;;
			j) vol_dec ;;
			t) swap_mute ;;
			q|) break ;;
		esac
	done
}

outputs_show(){
	list --enumerate
}

outputs_select(){
	watch=0
	i=
	for arg in "$@"
	do
		if test "$1" = --watch
		then
			watch=1
			shift
		elif test -z "$i"
		then
			i="$1"
		else
			usage
		fi
	done

	if test -z "$i"
	then
		echo >&2 "select-output needs an argument"
		usage
	fi

	if echo "$i" | grep '[^0-9]' >/dev/null
	then
		re="$i"
		ents=$(list --enumerate | grep -iE "$re" || :)

		if test -z "$ents"
		then
			echo >&2 "No outputs matching /$re/ found"
			exit 1
		fi
		if test $(echo "$ents" | wc -l) -ne 1
		then
			echo "Too many outputs matching /$re/:" >&2
			echo "$ents" | sed 's/^[^ ]* //' >&2
			exit 1
		fi

		i=$(echo "$ents" | sed 's/ .*//')
	fi

	while :
	do
		pactl list \
			| sed -n 's/^Sink Input #\(.*\)/\1/p' \
			| while read input
			do
				pactl move-sink-input "$input" "$i"
			done

		if test $watch -eq 0
		then break
		fi
		sleep 1
	done
}

for_devices(){
	if test "$dev_on_all" = yes
	then
		echo "$devices" | while read d
		do "$@" "$d"
		done
	else
		"$@" "$d"
	fi
}

init_alsa(){
	# $devices may contain spaces - must read via `echo | while read`
	devices=$(mixer scontrols | cut -d"'" -f2 | sed '/Capture/d')
	dev_default=$(get_active_dev)
	dev_on_all=yes
}

init_pulse(){
	# $devices may contain spaces - must read via `echo | while read`
	devices=$(pactl list sinks | sed -n '
		# filters
		/hdmi/Id;

		s/.*Name: \(.*\)/\1/p;
	')
	dev_default=$(get_active_dev)
	dev_on_all=yes
}

init(){
	if test $pulse -eq 0
	then init_alsa
	else init_pulse
	fi
}

#dev_default=Master
#devices='Headphone Front'

if test "$VOL_PA" = 0 || ! pactl info >/dev/null 2>&1
then pulse=0
else pulse=1
fi
#pulse=0 # note: some things don't work when in non-pulse mode
init

if test -n "$VOL_DEBUG" && test "$VOL_DEBUG" != 0
then
	echo "devices (default '$dev_default'):"
	echo "$devices" | sed 's/^/  /'
fi >&2

if test $# -eq 0
then
	vol_get
elif test $# -eq 1
then
	case "$1" in
		-i) interactive ;;
		[0-9]|[0-9][0-9]|[0-9][0-9][0-9]) vol_set "$1" ;;
		t|to|tog|togg|toggl|toggle) swap_mute ;;
		l|li|lis|list) list ;;
		-) vol_dec ;;
		+) vol_inc ;;
		o|ou|outs|outputs) outputs_show ;;
		*) usage ;;
	esac
else
	case "$1" in
		s|se|sel|select-output)
			shift
			outputs_select "$@"
			;;
		*) usage ;;
	esac
fi
