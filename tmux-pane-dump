#!/bin/sh

usage(){
	echo >&2 "Usage: $0 [-p] [-u file]"
	echo >&2 " -p: dump processes too"
	echo >&2 " -u: show update compared to file"
	echo >&2
	echo >&2 "Usage: $0 restore <file>"
	exit 2
}

restore(){
	case "$#" in
		0)
			cat
			;;
		1)
			if echo "$1" | grep '^-' >/dev/null
			then usage
			fi
			cat "$1"
			;;
		*)
			usage
			;;
	esac \
		| sed 's/path=//' \
		| awk '{print $2 " " $4}' \
		| awk '!x[$1]++' \
		| while read title wd
		do
			title=$(echo "$title" | tr _ ' ')
			new_title=$title
			if echo "$title" | grep '^>' >/dev/null
			then new_title=
			fi

			if ! tmux lsw -F '#W' | grep -x "$title" >/dev/null
			then
				if test -z "$new_title"
				then tmux new-window -c "$wd" -d
				else tmux new-window -c "$wd" -d -n "$new_title"
				fi
			else
				echo "already got $title" >&2
			fi
		done
}

dump(){
	proc=0
	update_file=
	while test $# -ne 0
	do
		if test "$1" = -p
		then proc=1
		elif test "$1" = -u
		then
			shift
			update_file="$1"
			if test -z "$update_file"
			then usage
			fi
		else usage
		fi
		shift
	done

	strip_proc(){
		sed -n '/^ *PID/q; p'
	}

	fmt_pre='#{session_name}:#{window_index}.#{pane_index} #{s/ /_/:window_name}'
	fmt_post=' cmd=#{pane_current_command} path=#{pane_current_path}'
	fmt_mid=
	if test $proc -ne 0
	then fmt_mid=' pid=#{pane_pid}'
	fi

	if test -n "$update_file"
	then
		t=/tmp/tmux-pane-cmp-$$
		trap "rm -f '$t'" EXIT

		strip_proc < "$update_file" > "$t"

		arg=
		if test $proc -ne 0
		then arg=-p
		fi
		"$0" $arg | strip_proc | diff -u "$t" -

		exit 0
	fi

	tmux lsp -aF "$fmt_pre$fmt_mid$fmt_post"

	if test $proc -ne 0
	then ps -e -o pid,ppid,uid,gid,state,nice,tty,command
	fi
}

case "${0##*/}" in
	tmux-pane-restore)
		restore "$@"
		;;
	*)
		if test "$1" = restore
		then
			shift
			restore "$@"
		else
			dump "$@"
		fi
		;;
esac
