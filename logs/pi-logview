#!/bin/sh

#(cat /var/log/auth.log.1; tac /var/log/auth.log) | while read day date time host process rest
#do
#	if echo "$process" | grep '^sshd\[' >/dev/null
#	then
#		echo "$day $date $time $host $process $rest"
#	fi
#done

usage(){
	echo >&2 "Usage: $0 [--[no-]color] [--danger-only]"
	exit 1
}

black=30
blue=34
red=31
yellow=33
magenta=35

danger_level_to_colour(){
	# 0: ok, 1: warning, 2: alert
	case $1 in
		0) printf '[0;'$black'm' ;;
		1) printf '[0;'$yellow'm' ;;
		2) printf '[0;'$red'm' ;;
		*) printf '[0;'$red'm' ;;
	esac
}

verbose=0
danger_only=0
col=0
if ! test -t 1
then col=1
fi

for arg
do
	case "$arg" in
		--no-color)
			col=1
			;;
		--color)
			col=0
			;;
		--danger-only)
			danger_only=1
			;;
		-v)
			verbose=1
			;;
		*)
			usage
			;;
	esac
done

have_col(){
	return $col
}

col_off(){
	have_col && printf '[m'
}

if have_col && test $verbose -ne 0
then
	seq 0 3 | while read x
	do
		danger_level_to_colour $x
		printf '%s ' $x
	done
	col_off
	echo
fi

file_contents(){
	for f
	do
		case "$f" in
			*.gz) zcat "$f" ;;
			*) cat "$f"
		esac
	done
}

filter_ssh(){
	file_contents \
		/var/log/auth.log \
		/var/log/auth.log.1 \
		/var/log/auth.log.[2345].gz \
		| grep ' rip sshd\[[0-9]*\]: \(Accepted\|Failed\)' \
		| awk '
		{
				# Oct 20 10:10:10 <host> sshd[pid]: Accepted publickey for <user> from <ip> port <port> <proto>: <key-type> SHA256:<key>
				# 1   2  3        4      5          6        7         8   9      10   11   12   13     14       15         16
				# Sep 11 10:10:10 <host> sshd[pid]: Failed password for <user> from <ip> port <port> <proto>
				# 1   2  3        4      5          6      7        8   9      10   11   12   13     14

				if($6 == "Accepted"){
					auth[$11] = 1;
				} else if($6 == "Failed"){
					failed[$11] = 1;
					failed_dates[$11] = $1 " " $2 " " $3
					failed_users[$11] = $4
				}
		}
		END {
			for (ip in failed) {
				if (auth[ip]) {
					print "ssh, auth'\''d: " ip
				} else {
					print "ssh, failed and never auth'\''d! " ip " (" failed_dates[ip] " as " failed_users[ip] ")"
				}
			}
		}
		'
}

filter_http(){
	file_contents \
		/var/log/lighttpd/access.log \
		/var/log/lighttpd/access.log.1 \
		/var/log/lighttpd/access.log.2.gz \
		| awk '
			{
				if ($3 == "-") {
					unauth[$1]++
					useragent_part[$1] = $14
				} else {
					auth[$1]++
				}
			}
			END {
				for (u in unauth) {
					if (auth[u]) {
						#print "http, auth'\''d: " u
					} else {
						print "http, never auth'\''d! " u " (" useragent_part[u] ")"
					}
				}
			}
		' \
		| sort
}

filter_ssh
filter_http
