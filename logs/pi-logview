#!/bin/sh

# PAM_SERVICE=sshd
# PAM_RHOST=127.0.0.1
# PAM_USER=pi
# PAM_TYPE=open_session
# PAM_TTY=ssh|open_session|close_session
case "$PAM_TYPE" in
	open_session)
		;;
	close_session)
		exit 0
		;;
	*)
		# probably not run from pam
		;;
esac

sed_month_to_num="s/Jan/01/; s/Feb/02/; s/Mar/03/; s/Apr/04/; s/May/05/; s/Jun/06/; s/Jul/07/; s/Aug/08/; s/Sep/09/; s/Oct/10/; s/Nov/11/; s/Dec/12/;"

#(cat /var/log/auth.log.1; tac /var/log/auth.log) | while read day date time host process rest
#do
#	if echo "$process" | grep '^sshd\[' >/dev/null
#	then
#		echo "$day $date $time $host $process $rest"
#	fi
#done

usage(){
	echo >&2 "Usage: $0 [--[no-]color] [--danger-only]"
	exit 1
}

black=30
blue=34
red=31
yellow=33
magenta=35

danger_level_to_colour(){
	# 0: ok, 1: warning, 2: alert
	case $1 in
		0) printf '[0;'$black'm' ;;
		1) printf '[0;'$yellow'm' ;;
		2) printf '[0;'$red'm' ;;
		*) printf '[0;'$red'm' ;;
	esac
}

verbose=0
danger_only=0
col=0
if ! test -t 1
then col=1
fi

for arg
do
	case "$arg" in
		--no-color)
			col=1
			;;
		--color)
			col=0
			;;
		--danger-only)
			danger_only=1
			;;
		-v)
			verbose=1
			;;
		*)
			usage
			;;
	esac
done

have_col(){
	return $col
}

col_off(){
	have_col && printf '[m'
}

if have_col && test $verbose -ne 0
then
	seq 0 3 | while read x
	do
		danger_level_to_colour $x
		printf '%s ' $x
	done
	col_off
	echo
fi

file_contents(){
	for f
	do
		case "$f" in
			*.gz) zcat "$f" ;;
			*) cat "$f"
		esac
	done
}

filter_ssh(){
	file_contents \
		/var/log/auth.log \
		/var/log/auth.log.1 \
		/var/log/auth.log.[2345].gz \
		| awk '
		$5 ~ "sshd" {
				# Oct 20 10:10:10 <host> sshd[pid]: Accepted publickey for <user> from <ip> port <port> <proto>: <key-type> SHA256:<key>
				# 1   2  3        4      5          6        7         8   9      10   11   12   13     14       15         16
				# Sep 11 10:10:10 <host> sshd[pid]: Failed password for <user> from <ip> port <port> <proto>
				# 1   2  3        4      5          6      7        8   9      10   11   12   13     14
				# Dec 13 08:05:46 <host> sshd[pid]: Failed password for invalid user <user> from <ip> port <port> <proto>
				# 1   2  3        4      5          6      7        8   9       10   11     12   13   14   15     16
				# Dec 13 08:05:46 <host> sshd[pid]: (Bad|Did not|Invalid|Protocol|Unable)
				# 1   2  3        4      5          6

				if($6 == "Accepted"){
					auth[$11] = 1;
				} else if($6 == "Failed"){
					if($9 == "invalid" && $10 == "user") {
						ip = $13
						failed_users[ip] = $4 " (" $11 ")"
					} else {
						ip = $11
						failed_users[ip] = $4 " (" $9 ")"
					}

					failed[ip] = 1;
					failed_dates[ip] = $1 " " $2 " " $3
				} else {
					i = match($0, "[0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*")
					if (i > 0) {
						ip = substr($0, i, RLENGTH)
						failed[ip] = 1;
						failed_users[ip] = "?"
						failed_dates[ip] = $1 " " $2 " " $3
					}
				}
		}
		END {
			for (ip in failed) {
				if (auth[ip]) {
					print "ssh, failed but auth'\''d: " ip
				} else {
					print "ssh, failed and never auth'\''d! " ip " (on \x1b[32m" failed_dates[ip] "\x1b[0m, as " failed_users[ip] ")"
				}
			}
		}
		' \
			| sed 's%on \([A-Za-z]*\) \([0-9]*\) %on yyyy/\1/\2 %; s%/\([0-9]\) %/0\1 %; '"$sed_month_to_num" \
			| sort -k 7
		# 06/Month/2022 --> 2022/Month/06
}

filter_http(){
	file_contents \
		/var/log/lighttpd/access.log \
		/var/log/lighttpd/access.log.1 \
		/var/log/lighttpd/access.log.2.gz \
		| awk '
			{
				if ($3 == "-") {
					unauth[$1]++

					ua = ""
					for(i = NF; i > 0; i -= 1) {
						ua = $i " " ua

						if(substr($i, 1, 1) == "\"")
							break
					}

					sub(" *$", "", ua)
					useragent_part[$1] = ua

					when = $4 " " $5
					sub(":", " ", when)
					gsub("[][]", "", when)
					date_part[$1] = when

				} else {
					auth[$1]++
				}
			}
			END {
				for (u in unauth) {
					if (auth[u]) {
						#print "http, auth'\''d: " u
					} else {
						print "http, never auth'\''d! " u " (on \x1b[32m" date_part[u] "\x1b[0m from " useragent_part[u] ")"
					}
				}
			}
		' \
			| sed 's%\([0-9]*\)/\([A-Z][a-z]*\)/\([0-9]*\)%\3/\2/\1%;'"$sed_month_to_num" \
			| sort -k 6
		# 06/Month/2022 --> 2022/Month/06
}

filter_ssh
filter_http
